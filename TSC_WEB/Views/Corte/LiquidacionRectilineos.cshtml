@model TSC_WEB.Models.Entidades.Corte.LiquidacionRectilineos.LiquidacionRectilineosEntidad

@using TSC_WEB.Models.Entidades.Corte.LiquidacionRectilineos;


@{
    ViewBag.Title = "Liquidación de Rectilineos";
    ViewBag.Modulo = "Corte";
    Layout = "~/Views/Plantillas/_Layout.cshtml";

    string busqueda;
    int cantidadtallas = Model.FichaTallas.Count;
    decimal totaltallasprimera = 0;
    decimal totaltallassegundas = 0;
    decimal totalpesobruto = 0;
    decimal totalkgdespachado = 0;
    decimal totalunidades = 0;
    decimal totales = 0;
    decimal totalundespachado = 0;
    decimal totalpesodespachado = 0;

    var tallas = cantidadtallas > 0 ? Model.FichaTallas.GroupBy(std => std.talla).Select(cl => new FichasTallasEntidad
    {
        talla = cl.First().talla,
        orden = cl.First().orden

    }).OrderBy(or => or.orden).ToList() : new List<FichasTallasEntidad> { };

    var tallascantidadprimera = cantidadtallas > 0 ?

    Model.FichaTallas.GroupBy(l => l.talla).Select(cl => new FichasTallasEntidad
    {
        talla = cl.First().talla,
        cantidadprimeraprogramada = cl.Sum(c => c.cantidadprimeraprogramada),
        realprimera = cl.Sum(b => b.realprimera),
        pesodespachado = cl.Sum(b => b.pesodespachado),
        consumoprogramado = cl.First().consumoprogramado,
        orden = cl.First().orden,
        cantidadsegundadespachada = cl.First().cantidadsegundadespachada,
        cantidadprimeradespachada = cl.First().cantidadprimeradespachada,
        cantliquidadaestado = cl.First().cantliquidadaestado
    }).OrderBy(or => or.orden).ToList() : new List<FichasTallasEntidad>();

    var fichastallas = cantidadtallas > 0 ?
    Model.FichaTallas.GroupBy(
        l => new
        {
            l.ficha,
            l.pedido,
            l.estilotsc,
            l.estilocliente,
            l.color
        }
    ).Select(cl => new FichasTallasEntidad
    {
        ficha = cl.First().ficha,
        pedido = cl.First().pedido,
        estilotsc = cl.First().estilotsc,
        estilocliente = cl.First().estilocliente,
        color = cl.First().color

    }).ToList() : new List<FichasTallasEntidad>();



    try
    {
        busqueda = !string.IsNullOrEmpty(Request.Params["busqueda"]) ? PageContext.Page.Request.Params["busqueda"].ToString() : "";
    }
    catch
    {
        busqueda = "";
    }

}

@* ESTILOS *@
@section style{

    <style>
        .tablefixed {
            table-layout: fixed;
        }

            .tablefixed th, .tablefixed td {
                border: 1px solid #605e5e;
            }

        #theadtr th {
            width: 130px;
            overflow: auto;
            border: 1px solid;
        }

        #theadtr {
            font-size: 16px !important;
        }

        table .inputtabla {
            text-align: center;
        }

        .bg-bloqueado {
            background: #d6d6d6 !important;
        }

        .bg-yellow {
            background: #ffffbf !important;
            color: #000 !important;
        }

        .bg-green {
            background: #c0ffc0 !important;
            color: #000 !important;
        }
    </style>

}

@*  BUSQUEDA *@
<div class="card card-outline card-primary">
    <div class="card-body">
        <form autocomplete="off" class="row" method="post" id="frmbusqueda">

            <div class="col-md-2">
                <label for="">Ficha:</label>

                <div class="input-group mb-3">
                    <input type="number" class="form-control form-control-sm" min="0" name="ficha" value="@Model.FichaCabecera.ficha" required autofocus />
                    <div class="input-group-append">
                        <button type="submit" class="btn btn-sm btn-primary">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>

            <div class="col-md-2">
                <label for="">Tipo Rectilineo</label>
                <select class="custom-select custom-select-sm" name="tipo" id="cbotipo" required>
                    <option value="">[SELECCIONE]</option>

                    @if (Model.FichaCabecera.tipo == "CUELLO")
                    {
                        <option value="CUELLO" selected="selected">CUELLO</option>
                    }
                    else
                    {
                        <option value="CUELLO">CUELLO</option>
                    }

                    @if (Model.FichaCabecera.tipo == "PUÑO")
                    {
                        <option value="PUÑO" selected="selected">PUÑO</option>
                    }
                    else
                    {
                        <option value="PUÑO">PUÑO</option>
                    }

                </select>
            </div>

            <div class="col-md-4">
                <label for="">Combo:</label>
                <input type="text" class="form-control form-control-sm" name="txtcombo" value="@Model.FichaCabecera.combo" disabled />
            </div>

            <div class="col-md-4">
                <label for="">Part. Rectilineo:</label>
                <input type="text" class="form-control form-control-sm" name="txtpartidarectilineo" value="@Model.FichaCabecera.partidarectilineo" disabled />
            </div>

            <div class="col-md-4">
                <label for="">Estilo TSC:</label>
                <input type="text" class="form-control form-control-sm" name="txtestilotsc" disabled value="@Model.FichaCabecera.estilotsc" />
            </div>

            <div class="col-md-4">
                <label for="">Pedido:</label>
                <input type="text" class="form-control form-control-sm" disabled value="@Model.FichaCabecera.pedidos" />
            </div>

            <div class="col-md-4">
                <label for="">Estilo Cliente:</label>
                <input type="text" class="form-control form-control-sm" disabled value="@Model.FichaCabecera.estilocliente" />
            </div>

            @* BUSQUEDA *@
            <input type="hidden" name="busqueda" value="busqueda">

        </form>
    </div>
</div>

@* SI HA BUSCADO *@
@if (Model.FichaCabecera.ficha != null)
{


    @* INFORMACION GENERAL DE LA PARTIDA *@
    <div class="card card-outline card-primary">
        <div class="card-header text-center">
            <label class="card-title">UNIDADES POR TALLA - PARTIDA #@Model.FichaCabecera.partidarectilineo</label>
            <div class="card-tools">
                <button type="button" class="btn btn-sm btn-success">
                    Liquidadas
                </button>
                <button type="button" class="btn btn-sm btn-warning">
                    Programadas
                </button>

            </div>
        </div>
        <div class="card-body">
            <table class="table table-bordered table-sm tablainput tablefixed">
                <thead class="text-center bg-danger">
                    <tr class="theadtr">
                        <th></th>
                        @foreach (var item in tallas)
                        {
                            <th>@item.talla</th>
                        }
                        <th class="align-vertical">TOTAL</th>
                    </tr>
                </thead>
                <tbody>

                    <tr>
                        <th>Cantidad 1ra</th>
                        @foreach (var item in tallascantidadprimera)
                        {
                            totaltallasprimera += item.cantidadprimeraprogramada;
                            string claseback = item.cantliquidadaestado ? "bg-green" : "bg-yellow";
                            <td> <input type="text" class="inputtabla @claseback" id="programado_talla_@item.talla" value="@item.cantidadprimeraprogramada" readonly> </td>
                        }

                        <td> <input type="text" class="inputtabla font-weight-bold" value="@totaltallasprimera" readonly></td>
                    </tr>

                    <tr>
                        <th>Cantidad 2da</th>
                        @foreach (var item in tallascantidadprimera)
                        {
                            totaltallassegundas += item.cantidadsegundadespachada;
                            <td> <input type="text" class="inputtabla" id="segundas_talla_@item.talla" value="@item.cantidadsegundadespachada" readonly> </td>
                        }

                        <td> <input type="text" class="inputtabla font-weight-bold" value="@totaltallassegundas" readonly></td>
                    </tr>

                    <tr>
                        <th>Total Unidades</th>
                        @foreach (var item in tallascantidadprimera)
                        {
                            totalunidades += item.totalunidades;
                            <td> <input type="text" class="inputtabla bg-bloqueado font-weight-bold" id="totalunidades_talla_@item.talla" value="@item.totalunidades" readonly> </td>
                        }

                        <td> <input type="text" class="inputtabla font-weight-bold bg-bloqueado" value="@totalunidades" readonly></td>
                    </tr>

                    <tr>
                        <th>Peso Bruto (Cons Prog)</th>
                        @foreach (var item in tallascantidadprimera)
                        {
                            totalpesobruto += item.pesobrutotalla;
                            <td> <input type="text" class="inputtabla" id="" value="@Math.Round(item.pesobrutotalla, 2)" readonly> </td>
                        }
                        <td> <input type="text" class="inputtabla font-weight-bold" value="@Math.Round(totalpesobruto, 2)" readonly></td>

                    </tr>

                    @*<tr>
                            <th>Consumo</th>
                            @foreach (var item in tallascantidadprimera)
                            {
                                <td> <input type="text" class="inputtabla" id="" value="@item.consumo" readonly> </td>
                            }
                            <td> <input type="text" class="inputtabla font-weight-bold" value="0" readonly></td>

                        </tr>*@

                    <tr>
                        <th>Unidades despachadas</th>
                        @foreach (var item in tallascantidadprimera)
                        {
                            totalundespachado += item.cantidadprimeradespachada;
                            <td> <input type="text" class="inputtabla bg-bloqueado font-weight-bold" id="" value="@Math.Round(item.cantidadprimeradespachada, 2)" readonly> </td>
                        }
                        <td> <input type="text" class="inputtabla font-weight-bold bg-bloqueado" value="@Math.Round(totalundespachado, 2)" readonly></td>

                    </tr>

                    <tr>
                        <th>Kilos despachados</th>
                        @foreach (var item in tallascantidadprimera)
                        {
                            totalkgdespachado += item.pesodespachado;
                            <td> <input type="text" class="inputtabla bg-bloqueado font-weight-bold" id="" value="@Math.Round(item.pesodespachado, 2)" readonly> </td>
                        }
                        <td> <input type="text" class="inputtabla font-weight-bold bg-bloqueado" value="@Math.Round(totalkgdespachado, 2)" readonly></td>

                    </tr>

                    @*<tr>
                            <th>Peso Bruto Despachado</th>
                            @foreach (var item in tallascantidadprimera)
                            {
                                totalpesodespachado += item.pesodespachado;
                                <td> <input type="text" class="inputtabla bg-bloqueado" id="" value="@Math.Round(item.pesodespachado, 2)" readonly> </td>

                            }
                            <td> <input type="text" class="inputtabla font-weight-bold bg-bloqueado" value="@Math.Round(totalpesodespachado, 2)" readonly></td>

                        </tr>*@

                </tbody>
            </table>
        </div>
    </div>

    //PENDIENTES POR TALLA (UNIDADES/KILOS)
    <div class="card card-outline card-primary">
        <div class="card-header text-center">
            <label class="card-title">PENDIENTES POR TALLA (UNIDADES/KILOS)</label>
        </div>
        <div class="card-body">
            <table class="table table-bordered table-sm tablainput tablefixed">
                <thead class="text-center bg-danger">
                    <tr class="theadtr">
                        <th></th>
                        @foreach (var item in tallas)
                        {
                            <th>@item.talla</th>
                        }
                        <th>TOTALES</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        decimal ttpendienteprimera = 0;
                        decimal pesobrutottolapendiente = 0;
                    }
                    <tr>
                        <th>Cantidad 1ra</th>
                        @foreach (var item in tallascantidadprimera)
                        {
                            ttpendienteprimera += item.pendiente;
                            <td> <input type="text" class="inputtabla" id="pendiente_talla_@item.talla" max="@item.cantidadprimeraprogramada" value="@item.pendiente" readonly> </td>
                        }
                        <td class="text-center">@ttpendienteprimera</td>
                    </tr>
                    <tr>
                        <th>Peso Bruto total</th>
                        @foreach (var item in tallascantidadprimera)
                        {
                            pesobrutottolapendiente += item.pesobrutorealtalla;
                            <td> <input type="text" class="inputtabla" id="pesototal_talla_@item.talla" value="@Math.Round(item.pesobrutorealtalla, 2)" readonly> </td>
                        }
                        <td class="text-center">@Math.Round(pesobrutottolapendiente, 2)</td>
                    </tr>
                    <tr>
                        <th>Estado</th>
                        @foreach (var item in tallascantidadprimera)
                        {
                            if (item.pendiente > 0)
                            {
                                <td class="text-center" id="tdestadotalla_@item.talla">
                                    <span class="badge bg-warning" title="Quedan prendas por liquidar">
                                        PENDIENTE
                                    </span>
                                </td>
                            }
                            else
                            {
                                <td class="text-center" id="tdestadotalla_@item.talla">
                                    <span class="badge bg-success" title="Todas las prendas fueron liquidadas">
                                        OK
                                    </span>
                                </td>
                            }
                        }
                        <td></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>




    @* ARMAMOS FICHAS *@
    foreach (var fichas in fichastallas)
    {

        <form class="card card-outline card-primary formulariosfichas" autocomplete="off">

            <div class="card-header text-center">

                <label class="card-title">FICHA: @fichas.ficha - PEDIDO: @fichas.pedido</label>
                <div class="card-tools">

                    @if (Model.FichaCabecera.estado == "PROCESO" || Model.FichaCabecera.estado == "APERTURADO")
                    {
                        <button type="submit" class="btn btn-sm btn-primary">
                            <i class="fas fa-save"></i>
                            Guardar
                        </button>
                    }

                </div>
            </div>
            <div class="card-body">

                @*ID RECTILINEO*@
                <input type="hidden" class="txtidrectilineoficha" id="txtidrectilineoficha_@fichas.ficha" name="txtidrectilineoficha" value="@fichas.idrectilineoficha">

                @*FICHA*@
                <input type="hidden" class="fichas" name="fichas" value="@fichas.ficha">

                @*PEDIDO*@
                <input type="hidden" class="pedido" name="pedido" value="@fichas.pedido">

                @*ESTILO TSC*@
                <input type="hidden" class="estilotsc" name="estilotsc" value="@fichas.estilotsc">

                @*ESTILO CLIENTE*@
                <input type="hidden" class="estilocliente" name="estilocliente" value="@fichas.estilocliente">

                @*COLOR*@
                <input type="hidden" class="color" name="color" value="@fichas.color">

                <table class="table table-bordered table-sm tablainput tablefixed">
                    @*CABECERA*@
                    <thead class="text-center bg-danger">
                        <tr class="theadtr">
                            <th></th>
                            @foreach (var item in tallas)
                            {
                                <th>@item.talla</th>
                            }
                            <th class="align-vertical">TOTAL</th>
                        </tr>
                    </thead>
                    @*CUERPO*@
                    <tbody>


                        @{
                            totales = 0;
                            var tfichas = (

                                from t in tallas
                                join ft in Model.FichaTallas on t.talla equals ft.talla into lista
                                from pc in lista.DefaultIfEmpty()
                                select new
                                {
                                    talla = pc.talla,
                                    ficha = pc.ficha,
                                    programado = pc.cantidadprimeraprogramada,
                                    real = pc.realprimera,
                                    pendiente = pc.pendiente,
                                    pesonetoreal = pc.pesonetoreal,
                                    pesobrutotalla = pc.pesobrutotalla,
                                    pesodespachado = pc.pesodespachado

                                }
                            ).Where(obj => obj.ficha == fichas.ficha).ToList();
                        }


                        @*PROGRAMADO*@
                        <tr>
                            <th>Programado</th>
                            @foreach (var talla in tallas)
                            {
                                var response = tfichas.Where(obj =>
                                    obj.talla == talla.talla
                                ).ToList();

                                if (response.Count == 0)
                                {
                                    <td> <input type="text" class="inputtabla bg-bloqueado" value="" readonly> </td>
                                }
                                else
                                {
                                    totales += response[0].programado;
                                    var clase = "programado_" + fichas.ficha + "_" + talla.talla;

                                    <td> <input type="text" readonly class="bg-bloqueado inputtabla programado @clase font-weight-bold" data-orden="@talla.orden" data-talla="@talla.talla" data-ficha="@fichas.ficha" value="@response[0].programado"> </td>
                                }

                            }

                            <td> <input type="text" class="inputtabla bg-bloqueado font-weight-bold" value="@totales" readonly> </td>
                        </tr>

                        @*MERMA PROGRAMADA*@
                        @*<tr>
                                <th>Merma Programada</th>
                                @foreach (var item in tallas)
                                {
                                    <td>
                                        @{
                                            var clase = "mermaprogramada" + fichas.ficha + "_" + item.talla;
                                        }
                                        <input type="number" class="inputtabla mermaprogramada bg-bloqueado @clase" value="0" data-orden="@item.orden" data-ficha="@fichas.ficha" data-talla="@item.talla" readonly>
                                    </td>
                                }
                                <td>
                                    <input type="number" class="inputtabla mermaprogramada bg-bloqueado" data-ficha="@fichas.ficha" value="0" readonly>
                                </td>
                            </tr>*@

                        @*REAL PRIMERA*@
                        <tr>
                            <th>Real (1ra)</th>
                            @{
                                totales = 0;
                            }
                            @foreach (var talla in tallas)
                            {
                                var response = tfichas.Where(obj =>
                                    obj.talla == talla.talla
                                ).ToList();

                                if (response.Count == 0)
                                {
                                    <td> <input type="text" class="inputtabla" value="" readonly> </td>
                                }
                                else
                                {

                                    totales += response[0].real;
                                    var clase = "realesprimera_" + fichas.ficha;
                                    <td> <input type="number" class="inputtabla realesprimera @clase talla_@talla.talla" data-ficha="@fichas.ficha" data-pesoprogramado="@response[0].pesobrutotalla" data-programado="@response[0].programado" data-orden="@talla.orden" data-talla="@talla.talla" max="@response[0].programado" value="@response[0].real"> </td>
                                }

                            }


                            <td>
                                <input type="text" class="inputtabla " id="totalprimera_@fichas.ficha" value="@totales" readonly>
                            </td>

                        </tr>

                        @*PENDIENTE*@
                        <tr>
                            <th>Pendiente</th>
                            @{
                                totales = 0;
                            }

                            @foreach (var talla in tallas)
                            {
                                var response = tfichas.Where(obj =>
                                    obj.talla == talla.talla
                                ).ToList();

                                if (response.Count == 0)
                                {
                                    <td> <input type="text" class="inputtabla bg-bloqueado" value="" readonly> </td>
                                }
                                else
                                {

                                    totales += response[0].pendiente;
                                    var clase = "pendientes_" + fichas.ficha;
                                    var clase_new = "pendientes_" + fichas.ficha + "_" + talla.talla;

                                    <td> <input type="number" class="bg-bloqueado inputtabla pendientes @clase @clase_new" data-orden="@talla.orden" data-ficha="@fichas.ficha" data-talla="@talla.talla" readonly value="@response[0].pendiente"> </td>
                                }

                            }
                            <td>
                                <input type="text" class="inputtabla bg-bloqueado" id="totalpendientes_@fichas.ficha" value="@totales" readonly>
                            </td>

                        </tr>

                        @*PESO NETO PROGRAMADO*@
                        <tr>
                            <th>Peso Neto Prog.</th>
                            @{
                                decimal totalespnp = 0;
                            }

                            @foreach (var talla in tallas)
                            {
                                var response = tfichas.Where(obj =>
                                    obj.talla == talla.talla
                                ).ToList();

                                if (response.Count == 0)
                                {
                                    <td> <input type="text" class="inputtabla" value="" readonly> </td>
                                }
                                else
                                {

                                    totalespnp += response[0].pesodespachado;
                                    var clase = "pesoprogramado_" + fichas.ficha;
                                    var id = "pesoprogramado_" + fichas.ficha + "_" + talla.talla;

                                    <td> <input type="number" id="@id" class="inputtabla bg-bloqueado pesoprogramado @clase" data-ficha="@fichas.ficha" data-orden="@talla.orden" data-talla="@talla.talla" readonly value="@Math.Round(response[0].pesodespachado,3)"> </td>
                                }

                            }
                            <td>
                                <input type="text" class="inputtabla bg-bloqueado" id="totalpesoprogramado_@fichas.ficha" value="@Math.Round(totalespnp,3)" readonly>
                            </td>
                        </tr>


                        @*PESO NETO TOTAL*@
                        <tr>
                            <th>Peso Neto total</th>
                            @{
                                decimal totalesd = 0;
                            }

                            @foreach (var talla in tallas)
                            {
                                var response = tfichas.Where(obj =>
                                    obj.talla == talla.talla
                                ).ToList();

                                if (response.Count == 0)
                                {
                                    <td> <input type="text" class="inputtabla bg-bloqueado" value="" disabled> </td>
                                }
                                else
                                {

                                    totalesd += response[0].pesonetoreal;
                                    var clase = "pesoneto_" + fichas.ficha;
                                    var id = "pesoneto_" + fichas.ficha + "_" + talla.talla;

                                    <td> <input type="number" id="@id" class="inputtabla bg-bloqueado pesoneto @clase" data-ficha="@fichas.ficha" data-orden="@talla.orden" data-talla="@talla.talla" step="0.01" value="@response[0].pesonetoreal" readonly> </td>
                                }

                            }
                            <td>
                                <input type="text" class="inputtabla" id="totalpesoneto_@fichas.ficha" value="@totalesd">
                            </td>
                        </tr>

                    </tbody>
                </table>

            </div>

        </form>

    }

    //SEGUNDAS

    <form action="" class="card card-primary card-outline" id="frmsegundas" autocomplete="off">

        <div class="card-header text-center">
            <label class="card-title">Segundas</label>
            <div class="card-tools">
                @if (Model.FichaCabecera.estado == "PROCESO" || Model.FichaCabecera.estado == "APERTURADO")
                {
                    <button type="submit" class="btn btn-sm btn-primary">
                        <i class="fas fa-save"></i>
                        Guardar
                    </button>
                }

            </div>
        </div>
        <div class="card-body">

            <table class="table table-bordered table-sm tablainput tablefixed">
                @*CABECERA*@
                <thead class="text-center bg-danger">
                    <tr class="theadtr">
                        <th></th>
                        @foreach (var item in tallas)
                        {
                            <th>@item.talla</th>
                        }
                        <th class="align-vertical">TOTAL</th>
                    </tr>
                </thead>
                <tbody id="tbodysegundas">
                    <tr>
                        <th>Programado</th>
                        @{
                            totaltallassegundas = 0;
                        }
                        @foreach (var item in tallascantidadprimera)
                        {
                            totaltallassegundas += item.cantidadsegundadespachada;
                            var cantidad = item.cantidadsegundadespachada;
                            if (cantidad > 0)
                            {
                                <td> <input type="text" class="inputtabla bg-bloqueado" id="segundasprogramado_talla_@item.talla" value="@item.cantidadsegundadespachada" readonly> </td>

                            }
                            else
                            {
                                <td> <input type="text" class="inputtabla bg-bloqueado" id="segundasprogramado_talla_@item.talla" value="" readonly> </td>
                            }
                        }

                        <td> <input type="text" class="inputtabla bg-bloqueado font-weight-bold" value="@totaltallassegundas" readonly></td>
                    </tr>

                    <tr>
                        <th>Cantidad 2da </th>
                        @{
                            totales = 0;
                        }
                        @foreach (var talla in tallas)
                        {
                            var response = Model.SegundasTallas.Where(obj =>
                                obj.talla == talla.talla
                            ).ToList();

                            if (totaltallassegundas > 0 && response.Count == 0)
                            {
                                var tallaprogramada = tallascantidadprimera.Where(obj =>
                                    obj.talla == talla.talla && obj.cantidadsegundadespachada > 0
                                ).ToList();

                                if (tallaprogramada.Count > 0)
                                {
                                    <td> <input type="number" max="@tallaprogramada[0].cantidadsegundadespachada" data-programadosegunda="@tallaprogramada[0].cantidadsegundadespachada" id="segundasingreso_talla_@talla.talla" class="inputtabla realessegunda talla_@talla.talla" data-orden="@talla.orden" data-talla="@talla.talla"> </td>
                                }
                                else
                                {
                                    <td> <input type="text" class="inputtabla" readonly value=""> </td>
                                }
                            }
                            else
                            {
                                if (response.Count == 0)
                                {
                                    <td> <input type="text" class="inputtabla" value="" readonly> </td>
                                }
                                else
                                {
                                    totales += response[0].realsegunda;
                                    <td> <input type="number" data-programadosegunda="@response[0].programadosegunda" max="@response[0].programadosegunda" id="segundasingreso_talla_@talla.talla" class="inputtabla realessegunda talla_@talla.talla" data-orden="@talla.orden" data-talla="@talla.talla" value="@response[0].realsegunda"> </td>
                                }
                            }
                        }

                        <td>
                            <input type="text" class="inputtabla " id="totalsegunda" value="@totales" readonly>
                        </td>

                    </tr>

                    <tr>
                        <th>Pendientes </th>
                        @{
                            totales = 0;
                        }
                        @foreach (var talla in tallas)
                        {
                            var response = Model.SegundasTallas.Where(obj =>
                                obj.talla == talla.talla
                            ).ToList();

                            if (response.Count == 0)
                            {
                                <td> <input type="text" class="inputtabla bg-bloqueado" value="" readonly> </td>
                            }
                            else
                            {
                                totales += response[0].pendientes;
                                <td> <input type="number" id="segundaspendiente_talla_@talla.talla" class="inputtabla bg-bloqueado pendientessegunda talla_@talla.talla" data-orden="@talla.orden" data-talla="@talla.talla" value="@response[0].pendientes" readonly> </td>
                            }

                        }


                        <td>
                            <input type="text" class="inputtabla bg-bloqueado" id="totalpendientessegunda" value="@totales" readonly>
                        </td>
                    </tr>

                    <tr>
                        <th>Peso Neto total</th>
                        @{
                            totales = 0;
                        }
                        @foreach (var talla in tallas)
                        {
                            var response = Model.SegundasTallas.Where(obj =>
                                obj.talla == talla.talla
                            ).ToList();

                            if (totaltallassegundas > 0 && response.Count == 0)
                            {
                                var tallaprogramada = tallascantidadprimera.Where(obj =>
                                    obj.talla == talla.talla && obj.cantidadsegundadespachada > 0
                                ).ToList();

                                if (tallaprogramada.Count > 0)
                                {
                                    <td> <input type="number" step="0.01" id="pesonetosegundas_talla_@talla.talla" class="inputtabla pesonetosegundas talla_@talla.talla" data-orden="@talla.orden" data-talla="@talla.talla"> </td>
                                }
                                else
                                {
                                    <td> <input type="text" class="inputtabla" readonly value=""> </td>
                                }
                            }
                            else
                            {
                                if (response.Count == 0)
                                {
                                    <td> <input type="text" class="inputtabla" value="" readonly> </td>
                                }
                                else
                                {
                                    totales += response[0].pesonetorealsegunda;
                                    <td> <input type="number" step="0.01" id="pesonetosegundas_talla_@talla.talla" class="inputtabla pesonetosegundas talla_@talla.talla" data-orden="@talla.orden" data-talla="@talla.talla" value="@response[0].pesonetorealsegunda"> </td>
                                }
                            }
                        }


                        <td>
                            <input type="text" class="inputtabla " id="totalpesonetosegunda" value="@totales" readonly>
                        </td>
                    </tr>

                </tbody>
            </table>

        </div>

    </form>

    //REGISTRO DE MERMAS

    <div class="row justify-content-center">

        <div class="col-md-4">

            <div class="card card-primary card-outline">
                <div class="card-header">

                </div>
                <div class="card-body">

                    <form action="" class="row justify-content-center" id="frmregistro">

                        <div class="col-md-6">
                            <label for="">Merma de recorte (kg)</label>
                            <input type="number" class="form-control form-control-sm" id="txtmermacorte" step="0.01" required value="@Model.FichaCabecera.mermarecorte">
                        </div>

                        <div class="col-md-6">
                            <label for="">Merma de hilos (kg)</label>
                            <input type="number" class="form-control form-control-sm" id="txtmermahilos" step="0.01" required value="@Model.FichaCabecera.mermahilos">
                        </div>

                        @if (Model.FichaCabecera.estado == "PROCESO" || Model.FichaCabecera.estado == "APERTURADO")
                        {
                            <div class="col-md-4">
                                <label for="">&nbsp;</label>
                                <button class="btn btn-primary btn-sm btn-block" type="submit">Guardar</button>
                            </div>
                        }



                    </form>

                </div>
            </div>

        </div>

    </div>

}



@section scripts{


    <script>

        let cbotipo = document.getElementById("cbotipo");

        let formulariosfichas   = document.getElementsByClassName("formulariosfichas");
        let frmsegundas         = document.getElementById("frmsegundas");
        let IDRECTILINEO        = "@Model.FichaCabecera.idrectilineohead" == "" ? null : "@Model.FichaCabecera.idrectilineohead";
        let PARTIDA             = "@Model.FichaCabecera.partidarectilineo" == "" ? null : "@Model.FichaCabecera.partidarectilineo";
        let LOTE                = "@Model.FichaCabecera.lote" == "" ? null : "@Model.FichaCabecera.lote";
        let TIPO                = cbotipo.value == "" ? null : cbotipo.value;


        let frmregistro = document.getElementById("frmregistro");
        let frmbusqueda = document.getElementById("frmbusqueda");


        let formularioactivo = null;



        frmbusqueda.addEventListener('submit', (e) => {
            MostrarCarga("Cargando...");
        });


        // FUNCION PARA CALCULAR LOS PENDIENTES
        $(".realesprimera").keyup(function () {

            let real    = $(this).val();
            let ficha   = $(this).data("ficha");
            let talla   = $(this).data("talla");

            let programado = $(`.programado_${ficha}_${talla}`).val();

            real = real == "" ? 0 : real;
            real = !isNaN(real) ? parseFloat(real) : 0;
            programado = parseFloat(programado);

            let resto = programado - real;

            if (resto >= 0) {
                $(`.pendientes_${ficha}_${talla}`).val(resto);
            } else {
                $(`.pendientes_${ficha}_${talla}`).val(0);
            }

            // TOTALES POR TALLA
            getTotalPendientesTalla(talla);

            // TOTALES REALES PRIMERA
            gettotales("realesprimera","totalprimera",ficha);

            // TOTALES PENDIENTES
            gettotales("pendientes", "totalpendientes", ficha);


        });


        // PESO NETO SEGUNDAS
        $(".pesonetosegundas").keyup(function () {

            let total = 0;
            let pesonetosegundas = document.getElementsByClassName("pesonetosegundas");

            for (let item of pesonetosegundas) {
                let valor = item.value;
                valor = valor == "" ? 0 : valor;
                valor = !isNaN(valor) ? parseFloat(valor) : 0;
                total += valor;
            }

            $("#totalpesonetosegunda").val(total);

        });


        // FUNCION PARA CALCULAR LOS PENDIENTES
        $(".realessegunda").keyup(function () {

            let real = $(this).val();
            let talla = $(this).data("talla");

            let programado = $(`#segundasprogramado_talla_${talla}`).val();

            real = real == "" ? 0 : real;
            real = !isNaN(real) ? parseFloat(real) : 0;
            programado = parseFloat(programado);

            let resto = programado - real;

            if (resto >= 0) {
                $(`#segundaspendiente_talla_${talla}`).val(resto);
            } else {
                $(`#segundaspendiente_talla_${talla}`).val(0);
            }

            let totalpendientes = 0;
            let pendientessegunda = document.getElementsByClassName("pendientessegunda");

            for (let item of pendientessegunda) {
                let valor = item.value;
                valor = valor == "" ? 0 : valor;
                valor = !isNaN(valor) ? parseFloat(valor) : 0;
                totalpendientes += valor;
            }


            $("#totalpendientessegunda").val(totalpendientes);

        });


        // PESO NETO
        $(".pesoneto").keyup(function () {

            // FICHA
            let ficha = $(this).data("ficha");
            // TOTALES PESO NETO REAL
            gettotales("pesoneto", "totalpesoneto", ficha);
        });


        // TOTAL DE PRIMERAS POR FICHA
        function gettotales(clase, total, ficha) {
            // SUMAMOS TOTAL POR FICHA
            let primeras = $(`.${clase}_${ficha}`);

            let totalprimera = 0;
            for (let item of primeras) {
                //console.log(item);
                let valor = $(item).val() == "" ? 0 : $(item).val().trim();
                valor = parseFloat(valor);
                totalprimera += valor;
            }

            $(`#${total}_${ficha}`).val(totalprimera);
        }


        // FUNCION PARA REGISTRAR LAS FICHAS
        async function saveFichas(form) {
            //console.log(form);
            MostrarCarga_new("Registrando...");

            saveHead().then(async (response) => {

                let idrectilineohead = response;
                let idficharectilineo   = form[1].value;
                let ficha = form[2].value;
                let pedido = form[3].value;
                let estilotsc = form[4].value;
                let estilocliente = form[5].value;
                let combo = form[6].value;




                let rptficha = await get("corte", "saveFichaRectilineo", {
                    idrectilineohead, idficharectilineo, ficha, pedido, estilotsc, estilocliente,combo,tipo:TIPO
                }, true);

                if (rptficha.success) {

                    let id      = rptficha.mensaje;
                    let card    = form.children[1];
                    let tabla   = card.children[6];
                    let tbody   = tabla.children[1];

                    // REGISTRAMOS TALLAS (PRIMERAS)
                    await saveTallas(id, tbody,ficha);

                    // OCULTAMOS CARGA
                    OcultarCarga();


                } else {
                    Advertir(rptficha.mensaje);
                }


            }).catch((error) => {
                Advertir("Ocurrio un error");
                console.log(error);
            });



        }


        // FUNCION PARA REGISTRAR TALLAS POR FICHA SEGUNDAS
        async function saveTallasSegundas(idrectilineo) {

            let tbody = document.getElementById("tbodysegundas");
            formularioactivo = tbody;
            let realessegundas = tbody.children[1];


            // RECORREMOS
            for (let item of realessegundas.querySelectorAll('.inputtabla')) {

                if (!item.readOnly) {

                    // REGISTRAMOS TALLAS
                    let talla = item.dataset.talla;
                    let orden = item.dataset.orden;
                    let programadosegunda = item.dataset.programadosegunda;
                    let realsegunda = item.value == "" ? 0 : item.value;

                    let id = `pesonetosegundas_talla_${talla}`;
                    //console.log(id);
                    let pesonetosegunda = document.getElementById(id).value;
                    pesonetosegunda = pesonetosegunda == "" ? 0 : pesonetosegunda;

                    let response = await get("corte", "saveTallasRectilineoSegundas", {
                        talla, realsegunda, idrectilineo, pesonetosegunda, orden, programadosegunda
                    }, true);

                    console.log(response);

                }



            }

        }


        // FUNCION PARA REGISTRAR TALLAS POR FICHA
        async function saveTallas(idrectilineoficha, tbody,ficha) {

            formularioactivo    = tbody;
            let realesprimera = tbody.children[1];

            // #########################
            // ### TOTALES POR FICHA ###
            // #########################

            // PESO TOTAL
            let pesototal           = parseFloat(document.getElementById(`totalpesoneto_${ficha}`).value);

            // REALES PRIMERA
            let totalprimerastallas = parseFloat(document.getElementById(`totalprimera_${ficha}`).value);

            // CONSUMO
            let consumogeneral = pesototal / totalprimerastallas;

            //console.log(pesototal, totalprimerastallas);


            // RECORREMOS
            for (let item of realesprimera.querySelectorAll('.inputtabla')) {

                //formularioactivo = item;

                if (!item.readOnly) {

                    // REGISTRAMOS TALLAS
                    let talla = item.dataset.talla;
                    let ficha = item.dataset.ficha;
                    let orden = item.dataset.orden;
                    let programado = item.dataset.programado;
                    let realprimera = item.value == "" ? 0 : item.value;
                    let pesoprogramado = item.dataset.pesoprogramado;





                    let id = `pesoneto_${ficha}_${talla}`;


                    // OBTENEMOS INPUT DEL PESO NETO
                    let pesonetoinput = document.getElementById(id);

                    // CALCULAMOS PESO NETO
                    let pesoneto = consumogeneral * parseFloat(realprimera);
                    pesoneto = pesoneto.toFixed(2);

                    // ASIGNAMOS VALOR AL INPUT
                    pesonetoinput.value = pesoneto;


                    let response = await get("corte", "saveTallasRectilineo", {
                        talla, realprimera, idrectilineoficha, pesoneto, orden, programado, pesoprogramado, tipo: TIPO
                    }, true);

                }



            }

        }

        // REGISTRAR CABECERA
        async function saveHead(estado = null) {

            let mermarecorte    = document.getElementById("txtmermacorte").value;
            let mermahilos      = document.getElementById("txtmermahilos").value;


            // REGISTRA CABECERA
            //if (IDRECTILINEO == null) {
                let response = await post("corte", "saveHeadRectilineo", {
                    partida: PARTIDA, lote: LOTE, mermarecorte, mermahilos, tipo: TIPO, estado
                },true);

                if (response.success) {
                    IDRECTILINEO = response.mensaje;
                } else {
                    Advertir(response.mensaje);
                }

            //}

            return IDRECTILINEO;

        }


        // CALCULTA TOTAL DE PENDIENTES POR TALLA
        function getTotalPendientesTalla(talla) {

            let programado  = document.getElementById(`programado_talla_${talla}`);
            let pendiente = document.getElementById(`pendiente_talla_${talla}`);
            let estado = document.getElementById(`tdestadotalla_${talla}`);


            // OBTENEMOS VALORES REGISTRADOS
            let totalliquidado = 0;
            let liquidados = document.getElementsByClassName(`talla_${talla}`);

            for (let item of liquidados) {
                let string = item.value == "" ? 0 : item.value;
                let valor = !isNaN(string) ? parseFloat(string) : 0;
                totalliquidado += valor;
            }

            let pend = parseFloat(programado.value) - totalliquidado;
            pendiente.value = pend;

            if (pend == 0) {
                estado.innerHTML = `
                    <span class="badge bg-success" title="Todas las prendas fueron liquidadas">
                        OK
                    </span>
                `;
            }

            if (pend > 0){
                estado.innerHTML = `
                    <span class="badge bg-warning" title="Quedan prendas por liquidar">
                        PENDIENTE
                    </span>
                `;
            }

            if (pend < 0) {
                estado.innerHTML = `
                    <span class="badge bg-danger" title="No puede liquidar mas de lo programado">
                        EXCEDE CANTIDAD
                    </span>
                `;
            }

            //console.log(talla,programado,pendiente);

        }
    </script>


    <script>
        //Get the button
        var mybutton = document.getElementById("btnGoToTop");

        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function () { scrollFunction() };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                $("#btnGoToTop").fadeIn("slow");
            } else {
                $("#btnGoToTop").fadeOut("slow");
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            $('html, body').animate({ scrollTop: 0 }, 'slow');
        }

    </script>


    @* SI ES UN REGISTRO NUEVO O APERTURADO *@
    @if (Model.FichaCabecera.estado == "PROCESO" || Model.FichaCabecera.estado == "APERTURADO")
    {
        <script>

            // REGISTRAR CABECERA
            frmregistro.addEventListener('submit', (e) => {
                e.preventDefault();

                MostrarCarga_new("Registrando");

                saveHead("PENDIENTE").then(response => {
                    if (response) {



                        var form = document.createElement("form");
                        // CONFIGURAMOS ATRIBUTOS DEL FORMULARIO
                        form.method = "GET";
                        //form.action = "pdfindicadortesting.report.php";
                        //form.target = "_blank";
                        // AGREGAMOS INPUT AL FORMULARIO
                        document.body.appendChild(form);

                        // ENVIAMOS FORMULARIO
                        form.submit();

                        // REMOVEMOS FORMULARIO
                        document.body.removeChild(form);

                        //OcultarCarga();
                        Informar("Registrado correctamente", 1500, true);

                    } else {
                        Advertir("Ocurrio un error");
                    }

                    //console.log(response);
                })
                    .catch(error => {
                        console.log(error);
                        Advertir("Ocurrio un error en el registro");
                    })

            });

            //loaD
            window.addEventListener('load', async () => {

                // EVENTO PARA REGISTRAR LAS FICHAS (PRIMERAS)
                for (let item of formulariosfichas) {

                    item.addEventListener('submit', async (e) => {
                        e.preventDefault();
                        await saveFichas(item);
                    });
                }

                // EVENTO PARA REGISTRAR LAS SEGUNDAS
                frmsegundas.addEventListener('submit', async (e) => {
                    e.preventDefault();

                    MostrarCarga("Cargando...");

                    // REGISTRAMOS CABECERA
                    saveHead().then(async (response) => {
                        let idrectilineohead = response;
                        // REGISTRAMOS TALLAS (SEGUNDAS)
                        await saveTallasSegundas(idrectilineohead);


                        // OCULTAMOS CARGA
                        OcultarCarga();

                    });



                });

            });

        </script>

    }


}