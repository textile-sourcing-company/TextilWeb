@model TSC_WEB.Models.Entidades.Corte.LiquidacionRectilineos.LiquidacionRectilineosEntidad

@using TSC_WEB.Models.Entidades.Corte.LiquidacionRectilineos;


@{
    ViewBag.Title = "Liquidación de Rectilineos";
    ViewBag.Modulo = "Corte";
    Layout = "~/Views/Plantillas/_Layout.cshtml";

    string busqueda;
    int cantidadtallas = Model.FichaTallas.Count;
    int totaltallasprimera = 0;
    //int totaltallasfichas = 0;
    //int? totaltallasfichasreales = 0;
    int totales = 0;


    var tallas = cantidadtallas > 0 ? Model.FichaTallas.GroupBy(std => std.talla).Select(cl => new FichasTallasEntidad
    {
        talla = cl.First().talla,
        orden = cl.First().orden

    }).ToList() : new List<FichasTallasEntidad> { };

    var tallascantidadprimera = cantidadtallas > 0 ?

    Model.FichaTallas.GroupBy(l => l.talla).Select(cl => new FichasTallasEntidad
    {
        talla = cl.First().talla,
        cantidad = cl.Sum(c => c.cantidad)
    }).ToList() : new List<FichasTallasEntidad>();

    var fichastallas = cantidadtallas > 0 ?
    Model.FichaTallas.GroupBy(l => l.ficha).Select(cl => new FichasTallasEntidad
    {
        ficha = cl.First().ficha,

    }).ToList() : new List<FichasTallasEntidad>();



    try
    {
        busqueda = !string.IsNullOrEmpty(Request.Params["busqueda"]) ? PageContext.Page.Request.Params["busqueda"].ToString() : "";
    }
    catch
    {
        busqueda = "";
    }

}

@* ESTILOS *@
@section style{

    <style>
        .tablefixed {
            table-layout: fixed;
        }

            .tablefixed th, .tablefixed td {
                border: 1px solid #605e5e;
            }

        #theadtr th {
            width: 130px;
            overflow: auto;
            border: 1px solid;
        }

        table .inputtabla {
            text-align:center;
        }

        .bg-bloqueado {
            background: #d6d6d6 !important;
        }

    </style>

}

@*  BUSQUEDA *@
<div class="card card-outline card-primary">
    <div class="card-body">
        <form autocomplete="off" class="row" method="post" id="frmbusqueda">

            <div class="col-md-4">
                <label for="">Ficha:</label>

                <div class="input-group mb-3">
                    <input type="number" class="form-control form-control-sm" min="0" name="ficha" value="@Model.FichaCabecera.ficha" required autofocus />
                    <div class="input-group-append">
                        <button type="submit" class="btn btn-sm btn-primary">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <label for="">Combo:</label>
                <input type="text" class="form-control form-control-sm" name="txtcombo" value="@Model.FichaCabecera.combo" disabled />
            </div>

            <div class="col-md-4">
                <label for="">Part. Rectilineo:</label>
                <input type="text" class="form-control form-control-sm" name="txtpartidarectilineo" value="@Model.FichaCabecera.partidarectilineo" disabled />
            </div>

            <div class="col-md-4">
                <label for="">Estilo TSC:</label>
                <input type="text" class="form-control form-control-sm" name="txtestilotsc" disabled value="@Model.FichaCabecera.estilotsc" />
            </div>

            <div class="col-md-4">
                <label for="">Pedido:</label>
                <input type="text" class="form-control form-control-sm" disabled value="@Model.FichaCabecera.pedidos" />
            </div>

            <div class="col-md-4">
                <label for="">Estilo Cliente:</label>
                <input type="text" class="form-control form-control-sm" disabled value="@Model.FichaCabecera.estilocliente" />
            </div>

            @* BUSQUEDA *@
            <input type="hidden" name="busqueda" value="busqueda">

        </form>
    </div>
</div>

@* SI HA BUSCADO *@
@if (Model.FichaCabecera.ficha != null)
{


    @* INFORMACION GENERAL DE LA PARTIDA *@
    <div class="card card-outline card-primary">
        <div class="card-header text-center">
            <label class="card-title">UNIDADES POR TALLA - PARTIDA #@Model.FichaCabecera.partidarectilineo</label>
        </div>
        <div class="card-body">
            <table class="table table-bordered table-sm tablainput tablefixed">
                <thead class="text-center bg-danger">
                    <tr class="theadtr">
                        <th></th>
                        @foreach (var item in tallas)
                        {
                            <th>@item.talla</th>
                        }
                        <th class="align-vertical">TOTAL</th>
                    </tr>
                </thead>
                <tbody>

                    <tr>
                        <th>Cantidad 1ra</th>
                        @foreach (var item in tallascantidadprimera)
                        {
                            totaltallasprimera += item.cantidad;
                            <td> <input type="text" class="inputtabla" value="@item.cantidad" readonly> </td>
                        }

                        <td> <input type="text" class="inputtabla" value="@totaltallasprimera" readonly></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>


    @* ARMAMOS FICHAS *@
    foreach (var fichas in fichastallas)
    {

        <form class="card card-outline card-primary formulariosfichas" autocomplete="off">

            <div class="card-header text-center">

                <label class="card-title">FICHA @fichas.ficha</label>
                <div class="card-tools">
                    <button type="submit" class="btn btn-sm btn-primary">
                        <i class="fas fa-save"></i>
                        Guardar
                    </button>

                </div>
            </div>
            <div class="card-body">

                @*ID RECTILINEO*@
                <input type="hidden" class="txtidrectilineoficha" id="txtidrectilineoficha_@fichas.ficha" name="txtidrectilineoficha" value="@fichas.idrectilineoficha">

                @*FICHA*@
                <input type="hidden" class="fichas" name="fichas" value="@fichas.ficha">

                <table class="table table-bordered table-sm tablainput tablefixed">
                    @*CABECERA*@
                    <thead class="text-center bg-danger">
                        <tr class="theadtr">
                            <th></th>
                            @foreach (var item in tallas)
                            {
                                <th>@item.talla</th>
                            }
                            <th class="align-vertical">TOTAL</th>
                        </tr>
                    </thead>
                    @*CUERPO*@
                    <tbody>


                        @{
                            totales = 0;
                            var tfichas = (

                                from t in tallas
                                join ft in Model.FichaTallas on t.talla equals ft.talla into lista
                                from pc in lista.DefaultIfEmpty()
                                select new
                                {
                                    talla = pc.talla,
                                    ficha = pc.ficha,
                                    programado = pc.cantidad,
                                    real = pc.realprimera,
                                    pendiente = pc.pendiente,
                                    pesonetoreal = pc.pesonetoreal

                                }
                            ).Where(obj => obj.ficha == fichas.ficha).ToList();
                        }


                        @*PROGRAMADO*@
                        <tr>
                            <th>Programado</th>
                            @foreach (var talla in tallas)
                            {
                                var response = tfichas.Where(obj =>
                                    obj.talla == talla.talla
                                ).ToList();

                                if (response.Count == 0)
                                {
                                    <td> <input type="text" class="inputtabla bg-bloqueado" value="0" readonly> </td>
                                }
                                else
                                {
                                    totales += response[0].programado;
                                    var clase = "programado_" + fichas.ficha + "_" + talla.talla;

                                    <td> <input type="text" readonly class="bg-bloqueado inputtabla programado @clase font-weight-bold" data-orden="@talla.orden" data-talla="@talla.talla" data-ficha="@fichas.ficha" value="@response[0].programado"> </td>
                                }

                            }

                            <td> <input type="text" class="inputtabla bg-bloqueado font-weight-bold" value="@totales" readonly> </td>
                        </tr>

                        @*MERMA PROGRAMADA*@
                        <tr>
                            <th>Merma Programada</th>
                            @foreach (var item in tallas)
                            {
                                <td>
                                    @{
                                        var clase = "mermaprogramada" + fichas.ficha + "_" + item.talla;
                                    }
                                    <input type="number" class="inputtabla mermaprogramada bg-bloqueado @clase" value="0" data-orden="@item.orden" data-ficha="@fichas.ficha" data-talla="@item.talla" readonly>
                                </td>
                            }
                            <td>
                                <input type="number" class="inputtabla mermaprogramada bg-bloqueado" data-ficha="@fichas.ficha" value="0" readonly>
                            </td>
                        </tr>

                        @*REAL PRIMERA*@
                        <tr>
                            <th>Real (1ra)</th>
                            @{
                                totales = 0;
                            }
                            @foreach (var talla in tallas)
                            {
                                var response = tfichas.Where(obj =>
                                    obj.talla == talla.talla
                                ).ToList();

                                if (response.Count == 0)
                                {
                                    <td> <input type="text" class="inputtabla" value="0" readonly> </td>
                                }
                                else
                                {

                                    totales += response[0].real;
                                    var clase = "realesprimera_" + fichas.ficha;
                                    <td> <input type="number" class="inputtabla realesprimera @clase" data-ficha="@fichas.ficha" data-orden="@talla.orden" data-talla="@talla.talla" max="@response[0].programado" value="@response[0].real"> </td>
                                }

                            }

                        
                            <td>
                                <input type="text" class="inputtabla " id="totalprimera_@fichas.ficha" value="@totales" readonly>
                            </td>

                        </tr>

                        @*PENDIENTE*@
                        <tr>
                            <th>Pendiente</th>
                            @{
                                totales = 0;
                            }

                            @foreach (var talla in tallas)
                            {
                                var response = tfichas.Where(obj =>
                                    obj.talla == talla.talla
                                ).ToList();

                                if (response.Count == 0)
                                {
                                    <td> <input type="text" class="inputtabla bg-bloqueado" value="0" readonly> </td>
                                }
                                else
                                {

                                    totales += response[0].pendiente;
                                    var clase = "pendientes_" + fichas.ficha;
                                    var clase_new = "pendientes_" + fichas.ficha + "_" + talla.talla;

                                    <td> <input type="number" class="bg-bloqueado inputtabla pendientes @clase @clase_new" data-orden="@talla.orden" data-ficha="@fichas.ficha" data-talla="@talla.talla" readonly value="@response[0].pendiente"> </td>
                                }

                            }
                            <td>
                                <input type="text" class="inputtabla bg-bloqueado" id="totalpendientes_@fichas.ficha" value="@totales" readonly>
                            </td>
                      
                        </tr>

                        @*PESO NETO TOTAL*@
                        <tr>
                            <th>Peso Neto total</th>
                            @{
                                decimal totalesd = 0;
                            }

                            @foreach (var talla in tallas)
                            {
                                var response = tfichas.Where(obj =>
                                    obj.talla == talla.talla
                                ).ToList();

                                if (response.Count == 0)
                                {
                                    <td> <input type="text" class="inputtabla" value="0" readonly> </td>
                                }
                                else
                                {

                                    totalesd += response[0].pesonetoreal;
                                    var clase = "pesoneto_" + fichas.ficha;
                                    var id = "pesoneto_" + fichas.ficha + "_" + talla.talla;

                                    <td> <input type="number" id="@id" class="inputtabla pesoneto @clase" data-ficha="@fichas.ficha" data-orden="@talla.orden" data-talla="@talla.talla" step="0.01" value="@response[0].pesonetoreal"> </td>
                                }

                            }
                            <td>
                                <input type="text" class="inputtabla" id="totalpesoneto_@fichas.ficha" value="@totalesd" readonly>
                            </td>
                        </tr>

                    </tbody>
                </table>

            </div>

        </form>

    }

    //REGISTRO DE MERMAS

    <div class="row justify-content-center">

        <div class="col-md-4">

            <div class="card card-primary card-outline">
                <div class="card-header">

                </div>
                <div class="card-body">

                    <form action="" class="row justify-content-center" id="frmregistro">

                        <div class="col-md-6">
                            <label for="">Merma de recorte (kg)</label>
                            <input type="number" class="form-control form-control-sm" id="txtmermacorte" step="0.01" required value="@Model.FichaCabecera.mermarecorte">
                        </div>

                        <div class="col-md-6">
                            <label for="">Merma de hilos (kg)</label>
                            <input type="number" class="form-control form-control-sm" id="txtmermahilos" step="0.01" required value="@Model.FichaCabecera.mermahilos">
                        </div>

                        <div class="col-md-4">
                            <label for="">&nbsp;</label>
                            <button class="btn btn-primary btn-sm btn-block" type="submit">Guardar</button>
                        </div>

                    </form>

                </div>
            </div>

        </div>

    </div>

}








@section scripts{


    <script>

        let formulariosfichas   = document.getElementsByClassName("formulariosfichas");
        let IDRECTILINEO        = "@Model.FichaCabecera.idrectilineohead" == "" ? null : "@Model.FichaCabecera.idrectilineohead";
        let PARTIDA             = "@Model.FichaCabecera.partidarectilineo" == "" ? null : "@Model.FichaCabecera.partidarectilineo";
        let LOTE                = "@Model.FichaCabecera.lote" == "" ? null : "@Model.FichaCabecera.lote";

        let frmregistro = document.getElementById("frmregistro");
        let frmbusqueda = document.getElementById("frmbusqueda");


        let formularioactivo = null;

        //loaD
        window.addEventListener('load', async () => {

            for (let item of formulariosfichas) {

                item.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    await saveFichas(item);
                });
            }

        });

        frmbusqueda.addEventListener('submit', (e) => {
            MostrarCarga("Cargando...");
        });


        // FUNCION PARA CALCULAR LOS PENDIENTES
        $(".realesprimera").keyup(function () {

            let real    = $(this).val();
            let ficha   = $(this).data("ficha");
            let talla   = $(this).data("talla");

            let programado = $(`.programado_${ficha}_${talla}`).val();

            real = real == "" ? 0 : real;
            real = !isNaN(real) ? parseFloat(real) : 0;
            programado = parseFloat(programado);

            let resto = programado - real;

            if (resto >= 0) {
                $(`.pendientes_${ficha}_${talla}`).val(resto);
            } else {
                $(`.pendientes_${ficha}_${talla}`).val(0);
            }

            // TOTALES REALES PRIMERA
            gettotales("realesprimera","totalprimera",ficha);

            // TOTALES PENDIENTES
            gettotales("pendientes", "totalpendientes", ficha);


        });


        // PESO NETO
        $(".pesoneto").keyup(function () {

            // FICHA
            let ficha = $(this).data("ficha");
            // TOTALES PESO NETO REAL
            gettotales("pesoneto", "totalpesoneto", ficha);
        });


        // TOTAL DE PRIMERAS POR FICHA
        function gettotales(clase, total, ficha) {
            // SUMAMOS TOTAL POR FICHA
            let primeras = $(`.${clase}_${ficha}`);

            let totalprimera = 0;
            for (let item of primeras) {
                //console.log(item);
                let valor = $(item).val() == "" ? 0 : $(item).val().trim();
                valor = parseFloat(valor);
                totalprimera += valor;
            }

            $(`#${total}_${ficha}`).val(totalprimera);
        }


        // FUNCION PARA REGISTRAR LAS FICHAS
        async function saveFichas(form) {

            MostrarCarga_new("Registrando...");

            saveHead().then(async (response) => {

                let idrectilineohead = response;
                let idficharectilineo   = form[1].value;
                let ficha = form[2].value;

                let rptficha = await get("corte", "saveFichaRectilineo", {
                    idrectilineohead, idficharectilineo,ficha
                }, true);

                if (rptficha.success) {

                    let id      = rptficha.mensaje;
                    let card    = form.children[1];
                    let tabla   = card.children[2];
                    let tbody   = tabla.children[1];

                    // REGISTRAMOS TALLAS
                    await saveTallas(id, tbody);

                    OcultarCarga();


                } else {
                    Advertir(rptficha.mensaje);
                }




            }).catch((error) => {
                Advertir("Ocurrio un error");
                console.log(error);
            });



        }

        // FUNCION PARA REGISTRAR TALLAS POR FICHA
        async function saveTallas(idrectilineoficha, tbody) {

            formularioactivo    = tbody;
            let realesprimera   = tbody.children[2];


            // RECORREMOS
            for (let item of realesprimera.querySelectorAll('.inputtabla')) {

                //formularioactivo = item;

                if (!item.readOnly) {

                    // REGISTRAMOS TALLAS
                    let talla = item.dataset.talla;
                    let ficha = item.dataset.ficha;
                    let orden = item.dataset.orden;
                    let realprimera = item.value == "" ? 0 : item.value;

                    let id = `pesoneto_${ficha}_${talla}`;
                    //console.log(id);
                    let pesoneto = document.getElementById(id).value;

                    let response = await get("corte", "saveTallasRectilineo", {
                        talla, realprimera, idrectilineoficha, pesoneto, orden
                    }, true);

                }



            }

        }

        // REGISTRAR CABECERA
        frmregistro.addEventListener('submit', (e) => {
            e.preventDefault();

            MostrarCarga_new("Registrando");

            saveHead().then(response => {
                OcultarCarga();
                console.log(response);
            })
            .catch(error => {
                console.log(error);
                Advertir("Ocurrio un error en el registro");
            })
        });


        // REGISTRAR CABECERA
        async function saveHead() {

            let mermarecorte    = document.getElementById("txtmermacorte").value;
            let mermahilos      = document.getElementById("txtmermahilos").value;


            // REGISTRA CABECERA
            //if (IDRECTILINEO == null) {
                let response = await get("corte", "saveHeadRectilineo", {
                    partida: PARTIDA, lote: LOTE, mermarecorte, mermahilos
                },true);

                if (response.success) {
                    IDRECTILINEO = response.mensaje;
                } else {
                    Advertir(response.mensaje);
                }

            //}

            return IDRECTILINEO;

        }

    </script>


}